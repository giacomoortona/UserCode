/*****************************************************************************
 * Project: BaBar detector at the SLAC PEP-II B-factory
 * Package: CharmDalitzFit
 *    File: $Id: RooIsobar3Pi.rdl,v 1.2 2008/06/10 17:08:25 pellicci Exp $
 * Authors:
 *   Mario Pelliccioni, pellicci@slac.stanford.edu
 *
 *****************************************************************************/

#ifndef __ROO_ISOBAR3PI_HH__
#define __ROO_ISOBAR3PI_HH__

#include "RooFitCore/RooRealVar.hh"
#include "RooFitCore/RooArgList.hh"
#include "RooFitCore/RooDataSet.hh"
#include "EvtGenBase/EvtSpinType.hh"
#include "EvtGenBase/EvtCyclic3.hh"
#include "EvtGenBase/EvtPto3PAmp.hh"
#include "EvtGenBase/EvtDalitzPlot.hh"
#include "EvtGenBase/EvtComplex.hh"

class RooIsobar3Pi {

public:

  RooIsobar3Pi(const int Asign, EvtDalitzPlot *dalitzSpace, const string dirname);
  inline virtual ~RooIsobar3Pi() {};
  
  inline  void        getFileName(char int_name[50]) const;
  virtual double      getNormalization() const;
  virtual void        calNorm();
  inline  RooArgList* getObsList( void ) { return _obs_list ; }

  EvtComplex getamp(const double _m13, const double _m23) const;
  double     getamp2(const double _m13, const double _m23) const;
  EvtComplex ResAmp(const double _m13, const double _m23, const int i) const;
  EvtComplex efficiency(const double _m13, const double _m23) const;
  void       helicityangle(RooDataSet *data) const;

  RooRealVar* _massRes[19];
  RooRealVar* _gammRes[19];
  EvtSpinType::spintype _spinRes[19];
  EvtCyclic3::Pair _trackinfo[19];
  RooRealVar* _ampRes[19];
  RooRealVar* _phaseRes[19];
  EvtPto3PAmp::NumType _typeRes[19];
  EvtDalitzPlot *_dalitzSpace;

  inline int    getnRes() const {return nRes;}
  inline string get_crossInt_name() {return name + "CrossIntegralD0_RS.dat";};

  bool inDalitz(const double m13, const double m23) const;

protected:

private:

  int nRes;
  string name;

  int _Asign;
  EvtComplex *normarray[19][19];
  EvtComplex *normarray2[19][19];
  int _ndiv_eff;

  mutable EvtComplex _dalitzamplitude, _coeff_j, _coeff_k;

  void initResonance();
  void getNormvalues();
  void readefficiency();

  double getm12(const double m13, const double m23) const;
  double runningWidth(const double s, const int i) const;
  double pionCMmom(const double s, const double m1, const double m2) const;

  //efficiency parametrization
  vector< RooRealVar* > _n0;
  vector< RooRealVar* > _n1;
  vector< RooRealVar* > _c1;
  vector< RooRealVar* > _c2;
  vector< RooRealVar* > _c3;
  vector< RooRealVar* > _c4;
  vector< RooRealVar* > _c5;

  RooArgList* _obs_list;
  
  ClassDef(RooIsobar3Pi,1)

};

#endif
