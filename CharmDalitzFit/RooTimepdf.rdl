 /****************************************************************************
 * Project: Kpipipdf                                                         *
 * Package: CharmDalitzFit                                                   *
 *    File: $Id: RooTimepdf.rdl,v 1.23 2009/08/24 08:47:34 pellicci Exp $    *
 * Authors:                                                                  *
 *   MP, Mario Pelliccioni, Univerista di Torino, pellicci@slac.stanford.edu *
 *   GC, Gianluca Cavoto, Universita di Roma, cavoto@slac.stanford.edu       *
 *****************************************************************************/

#ifndef ROO_TIMEPDF
#define ROO_TIMEPDF

#include "RooFitCore/RooAbsAnaConvPdf.hh"
#include "RooFitCore/RooRealProxy.hh"
#include "RooFitCore/RooListProxy.hh"
#include "RooFitCore/RooArgList.hh"
#include "RooFitCore/RooRealVar.hh"
#include "RooFitCore/RooAbsReal.hh"

#include "EvtGenBase/EvtDalitzPlot.hh"
#include "EvtGenBase/EvtComplex.hh"
#include "CharmDalitzFit/RooIsobar.hh"

class RooTimepdf : public RooAbsAnaConvPdf {
public:

  inline RooTimepdf() { }

  RooTimepdf(const char *name, const char *title, RooRealVar& d0Lifetime, const RooResolutionModel& model, RooAbsReal& tau);

  RooTimepdf(const char *name, const char *title, RooRealVar& d0Lifetime, RooAbsReal& m12, RooAbsReal& m13, const RooResolutionModel& model,
	     EvtDalitzPlot* dalitzSpace, RooAbsReal& tau, const string dirname);

  RooTimepdf(const char *name, const char *title, RooRealVar& d0Lifetime, RooAbsReal& m12, RooAbsReal& m13, const RooResolutionModel& model,
	     EvtDalitzPlot* dalitzSpace, RooAbsReal& tau, RooAbsReal& c1, RooAbsReal& c2, Int_t D0flav, const string dirname);

  RooTimepdf(const RooTimepdf& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new RooTimepdf(*this,newname); }
  inline virtual ~RooTimepdf() { };

  virtual Double_t coefficient(Int_t basisIndex) const ;

  inline double myevaluate() const {return evaluate();}

  // Normalization
  virtual Int_t getCoefAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const;
  virtual Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName=0) const;

  // Generator
  Int_t getGenerator(const RooArgSet& directVars, RooArgSet &generateVars, Bool_t staticInitOK=kTRUE) const;
  void initGenerator(Int_t code) ;
  void generateEvent(Int_t code) ;
  void genLifetime();

  inline RooIsobar* getManager() const {return basepdf;}
  inline RooListProxy* getList() const {return _prxyList;}

protected:

  Double_t getI2() const;
  void getNormarray();

  RooRealProxy _d0Lifetime ;
  RooRealProxy _tau ;
  RooRealProxy _m12 ;
  RooRealProxy _m13 ;
  RooRealProxy _c1 ;
  RooRealProxy _c2 ;

  RooListProxy* _prxyList;
  RooArgList* obsList;

  Double_t I3value;
  Double_t _pi;
  EvtComplex normarray[17][17];

  Int_t _isWS;
  Int_t _noDalitz;
  Int_t _D0flav;

  Int_t nResbase, nResquad;

  Int_t _basisExp ;
  Int_t _linearExp ;
  Int_t _quadExp ;

  RooIsobar *basepdf, *quadpdf;

  EvtDalitzPlot *_dalitzSpace;
  inline Double_t getm23() const
  {return pow(_dalitzSpace->bigM(),2) + pow(_dalitzSpace->mA(),2) + pow(_dalitzSpace->mB(),2) + pow(_dalitzSpace->mC(),2) - _m12 - _m13;}

  Double_t _pdfmax;
  Double_t sampleEvent();
  Int_t _totGen;

  ClassDef(RooTimepdf,0) // Signal PDF
};

#endif
